// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "05/04/2017 19:13:08"
                                                                                
// Verilog Test Bench template for design : top
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 10 ps/ 1 ps
module top_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg SPI_CLK;
reg SPI_CS;
reg SPI_MOSI;
reg slave1_spi_miso;
reg slave2_spi_miso;
reg slave3_spi_miso;
reg slave4_spi_miso;
reg slave5_spi_miso;
reg slave6_spi_miso;
reg slave7_spi_miso;
reg sys_clk;
reg sys_rst_n;
// wires                                               
wire SPI_MISO;
wire f_nce;
wire slave1_spi_clk;
wire slave1_spi_cs;
wire slave1_spi_mosi;
wire slave2_spi_clk;
wire slave2_spi_cs;
wire slave2_spi_mosi;
wire slave3_spi_clk;
wire slave3_spi_cs;
wire slave3_spi_mosi;
wire slave4_spi_clk;
wire slave4_spi_cs;
wire slave4_spi_mosi;
wire slave5_spi_clk;
wire slave5_spi_cs;
wire slave5_spi_mosi;
wire slave6_spi_clk;
wire slave6_spi_cs;
wire slave6_spi_mosi;
wire slave7_spi_clk;
wire slave7_spi_cs;
wire slave7_spi_mosi;
wire sram_cs;

// assign statements (if any)                          
top i1 (
// port map - connection between master ports and signals/registers   
	.SPI_CLK(SPI_CLK),
	.SPI_CS(SPI_CS),
	.SPI_MISO(SPI_MISO),
	.SPI_MOSI(SPI_MOSI),
	.f_nce(f_nce),
	.slave1_spi_clk(slave1_spi_clk),
	.slave1_spi_cs(slave1_spi_cs),
	.slave1_spi_miso(slave1_spi_miso),
	.slave1_spi_mosi(slave1_spi_mosi),
	.slave2_spi_clk(slave2_spi_clk),
	.slave2_spi_cs(slave2_spi_cs),
	.slave2_spi_miso(slave2_spi_miso),
	.slave2_spi_mosi(slave2_spi_mosi),
	.slave3_spi_clk(slave3_spi_clk),
	.slave3_spi_cs(slave3_spi_cs),
	.slave3_spi_miso(slave3_spi_miso),
	.slave3_spi_mosi(slave3_spi_mosi),
	.slave4_spi_clk(slave4_spi_clk),
	.slave4_spi_cs(slave4_spi_cs),
	.slave4_spi_miso(slave4_spi_miso),
	.slave4_spi_mosi(slave4_spi_mosi),
	.slave5_spi_clk(slave5_spi_clk),
	.slave5_spi_cs(slave5_spi_cs),
	.slave5_spi_miso(slave5_spi_miso),
	.slave5_spi_mosi(slave5_spi_mosi),
	.slave6_spi_clk(slave6_spi_clk),
	.slave6_spi_cs(slave6_spi_cs),
	.slave6_spi_miso(slave6_spi_miso),
	.slave6_spi_mosi(slave6_spi_mosi),
	.slave7_spi_clk(slave7_spi_clk),
	.slave7_spi_cs(slave7_spi_cs),
	.slave7_spi_miso(slave7_spi_miso),
	.slave7_spi_mosi(slave7_spi_mosi),
	.sram_cs(sram_cs),
	.sys_clk(sys_clk),
	.sys_rst_n(sys_rst_n)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

